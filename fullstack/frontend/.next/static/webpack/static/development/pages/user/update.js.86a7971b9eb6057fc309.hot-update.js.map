{"version":3,"file":"static/webpack/static\\development\\pages\\user\\update.js.86a7971b9eb6057fc309.hot-update.js","sources":["webpack:///./actions/imgur.js","webpack:///./components/auth/ProfileUpdate.js"],"sourcesContent":["import { API_IMGUR } from '../config';\r\n\r\nexport const imageupload = (img) => {\r\n    let formData = new FormData();\r\n    formData.append('image', img);\r\n    return fetch('https://api.imgur.com/3/image/', {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Authorization': `Client-ID ${API_IMGUR}` \r\n        },\r\n        body: formData\r\n    })\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .catch(err => console.log(err))\r\n};\r\n\r\n// IMAGE UPLOAD CODE\r\n\r\n// handleImage(event) {\r\n//     this.setState({ uploading: true })\r\n//     var fileInput = false\r\n//     if (!event.target.files[0] || event.target.files[0].size > 19922944) {\r\n//         this.setState({ imageError: true, uploading: false })\r\n//     }\r\n//     if (event.target.files[0]) {\r\n//         fileInput = true\r\n//     }\r\n//     if (fileInput) {\r\n//         var img = event.target.files[0]\r\n//         imageupload(img).then(res => {\r\n//             let imgArray = this.state.image\r\n//             imgArray.push(res.data.id)\r\n//             this.setState({ image: imgArray, imageError: false, uploading: false })\r\n//             this.postData.set('image', imgArray)\r\n//         }\r\n//         )\r\n//     }\r\n// };\r\n\r\n// deleteImage = (e, i) => {\r\n//     e.preventDefault();\r\n//     let imgList = this.state.image\r\n//     imgList.splice(i, 1)\r\n//     this.setState({image: imgList})\r\n//     this.postData.set('image', imgList)\r\n// };\r\n\r\n{/* <input type=\"file\" accept=\"image/*\" onChange={this.handleImage} id=\"image-input\" className={imageError ? \"form-control form-control-sm is-invalid\" : \"form-control form-control-sm is-valid\"} />       */}","import Link from 'next/link';\r\nimport { useState, useEffect } from 'react';\r\nimport Router from 'next/router';\r\nimport { getCookie, isAuth, updateUser } from '../../actions/auth';\r\nimport { getProfile, update } from '../../actions/user';\r\nimport { API } from '../../config';\r\nimport { imageupload } from '../../actions/imgur';\r\n\r\nconst ProfileUpdate = () => {\r\n    const [values, setValues] = useState({\r\n        username: '',\r\n        name: '',\r\n        email: '',\r\n        avatar: '',\r\n        cover: '',\r\n        about: '',\r\n        blood: '',\r\n        contact: '',\r\n        address: '',\r\n        password: '',\r\n        error: false,\r\n        success: false,\r\n        loading: false,\r\n        photo: '',\r\n        userData: ''\r\n    });\r\n\r\n    const token = getCookie('token');\r\n    const { username, name, email, avatar, cover, about, blood, contact, address, password, error, success, loading, photo, userData } = values;\r\n\r\n    const init = () => {\r\n        getProfile(token).then(data => {\r\n            if (data.error) {\r\n                setValues({ ...values, error: data.error });\r\n            } else {\r\n                setValues({\r\n                    ...values,\r\n                    username: data.username,\r\n                    name: data.name,\r\n                    email: data.email,\r\n                    avatar: data.avatar,\r\n                    cover: data.cover,\r\n                    about: data.about,\r\n                    blood: data.blood,\r\n                    contact: data.contact,\r\n                    address: data.address,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, []);\r\n\r\n    const handleChange = name => e => {\r\n        const value = name === 'photo' ? e.target.files[0] : e;\r\n        let userFormData = new FormData();\r\n        userFormData.set(name, value);\r\n        setValues({ ...values, [name]: value, userData: userFormData, error: false, success: false });\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setValues({ ...values, loading: true });\r\n        update(token, userData).then(data => {\r\n            if (data.error) {\r\n                setValues({ ...values, error: data.error, success: false, loading: false });\r\n            } else {\r\n                updateUser(data, () => {\r\n                    setValues({\r\n                        ...values,\r\n                        username: data.username,\r\n                        name: data.name,\r\n                        email: data.email,\r\n                        avatar: data.avatar,\r\n                        cover: data.cover,\r\n                        about: data.about,\r\n                        password: '',\r\n                        blood: data.blood,\r\n                        contact: data.contact,\r\n                        address: data.address,\r\n                        success: true,\r\n                        loading: false\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const profileUpdateForm = () => (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"btn btn-outline-info\">\r\n                    Profile photo\r\n                    <input onChange={handleChange('photo')} type=\"file\" accept=\"image/*\" hidden />\r\n                </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"text-muted\">Username</label>\r\n                <input onChange={handleChange('username')} type=\"text\" value={username} className=\"form-control\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"text-muted\">Name</label>\r\n                <input onChange={handleChange('name')} type=\"text\" value={name} className=\"form-control\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"text-muted\">Email</label>\r\n                <input onChange={handleChange('email')} type=\"text\" value={email} className=\"form-control\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"text-muted\">About</label>\r\n                <textarea onChange={handleChange('about')} type=\"text\" value={about} className=\"form-control\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label className=\"text-muted\">Password</label>\r\n                <input onChange={handleChange('password')} type=\"password\" value={password} className=\"form-control\" />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n\r\n    const showError = () => (\r\n        <div className=\"alert alert-danger\" style={{ display: error ? '' : 'none' }}>\r\n            {error}\r\n        </div>\r\n    );\r\n\r\n    const showSuccess = () => (\r\n        <div className=\"alert alert-success\" style={{ display: success ? '' : 'none' }}>\r\n            Profile updated\r\n        </div>\r\n    );\r\n\r\n    const showLoading = () => (\r\n        <div className=\"alert alert-info\" style={{ display: loading ? '' : 'none' }}>\r\n            Loading...\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <img\r\n                            src={`${API}/user/photo/${username}`}\r\n                            className=\"img img-fluid img-thumbnail mb-3\"\r\n                            style={{ maxHeight: 'auto', maxWidth: '100%' }}\r\n                            alt=\"user profile\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-8 mb-5\">\r\n                        {showSuccess()}\r\n                        {showError()}\r\n                        {showLoading()}\r\n                        {profileUpdateForm()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default ProfileUpdate;\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;AAQA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AADA;AAAA;AACA;AAkBA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAemCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;A","sourceRoot":""}